{"version":3,"sources":["ImageLightbox.js","ImageContainer.js","ScrollTop.js","DesktopIconsOverlay.js","images/logo-white.png","images/wallpapers/howl049.jpg","images/wallpapers/louie-zong-cat-walking-bg.png","images/wallpapers/louie-zong-fox.png","images/wallpapers/mimi008.jpg","images/wallpapers/mimi047.jpg","images/wallpapers/Ring.jpg","images/wallpapers/ponyo012.jpg","images/wallpapers/Spiderverse.jpg","images/wallpapers/chihiro007.jpg","images/wallpapers/Animal-crossing-2.jpg","images/wallpapers/fire-emblem-wallpaper-3.jpg","images/wallpapers/rav.jpg","App.js","serviceWorker.js","index.js"],"names":["ImageLightbox","props","useState","isImageClicked","setIsImageClicked","image","imageUrl","onClose","_","title","imageTitle","alt","src","onClick","className","ImageContainer","this","href","originalImageLink","target","rel","React","Component","ScrollTop","state","is_visible","scrollComponent","document","addEventListener","e","toggleVisibility","window","pageYOffset","setState","scrollTo","top","behavior","scrollToTop","xmlns","height","width","transform","ry","y","x","fill","d","btnStyles","makeStyles","theme","button","margin","spacing","App","logo","id","Button","variant","color","startIcon","Icon","wallpaper12","wallpaper8","wallpaper6","wallpaper2","wallpaper3","wallpaper10","wallpaper11","wallpaper4","wallpaper5","wallpaper1","wallpaper7","wallpaper9","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b4c9a880.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Lightbox from \"react-awesome-lightbox\";\r\nimport \"react-awesome-lightbox/build/style.css\";\r\n\r\nfunction ImageLightbox(props) {\r\n    const [isImageClicked, setIsImageClicked] = useState(false);\r\n\r\n    // Open the modal for the image\r\n    let clickImage = _ => {\r\n        setIsImageClicked(true);\r\n    }\r\n\r\n    // Hide the model for the image\r\n    let unClickImage = _ => {\r\n        setIsImageClicked(false);\r\n    }\r\n\r\n    return (\r\n        isImageClicked ?\r\n            <Lightbox image={props.imageUrl} onClose={unClickImage} title={props.imageTitle} />\r\n            :\r\n            <img alt={props.imageTitle} src={props.imageUrl} onClick={clickImage} className={\"wallpaper\"} />\r\n    )\r\n\r\n}\r\n\r\nexport default ImageLightbox;","import React from \"react\";\r\nimport ImageLightbox from \"./ImageLightbox.js\";\r\n\r\nexport default class ImageContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={\"image-container\"} >\r\n                <ImageLightbox imageUrl={this.props.imageUrl} imageTitle={this.props.imageTitle} className={\"image-lightbox\"}></ImageLightbox>\r\n                <p><a className=\"image-link\" href={this.props.originalImageLink} target=\"_blank\" rel=\"noreferrer\">Original Image Link</a></p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nexport default class ScrollTop extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      is_visible: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var scrollComponent = this;\r\n    document.addEventListener(\"scroll\", function (e) {\r\n      scrollComponent.toggleVisibility();\r\n    });\r\n  }\r\n\r\n  toggleVisibility() {\r\n    if (window.pageYOffset > 300) {\r\n      this.setState({\r\n        is_visible: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        is_visible: false\r\n      });\r\n    }\r\n  }\r\n\r\n  scrollToTop() {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const { is_visible } = this.state;\r\n    return (\r\n      <div className=\"scroll-top\">\r\n        {is_visible && (\r\n          <div onClick={() => this.scrollToTop()}>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              height=\"38.735\"\r\n              width=\"38.735\"\r\n            >\r\n              <g transform=\"translate(-18.121 -3.364)\">\r\n                <rect\r\n                  ry=\"4.928\"\r\n                  y=\"3.364\"\r\n                  x=\"18.121\"\r\n                  height=\"38.735\"\r\n                  width=\"38.749\"\r\n                  fill=\"#3f51b5\"\r\n                />\r\n                <g transform=\"translate(-.48 2.134)\">\r\n                  <rect\r\n                    ry=\"4.928\"\r\n                    y=\"1.229\"\r\n                    x=\"18.601\"\r\n                    height=\"38.735\"\r\n                    width=\"38.749\"\r\n                    fill=\"url(#b)\"\r\n                  />\r\n                  <g fill=\"white\">\r\n                    <path d=\"M24.435 17.62l4.684 4.685 5.044-5.044v19.352h6.625V17.26l5.044 5.044 4.683-4.684-13.04-13.04z\" />\r\n                    <path d=\"M24.435 17.62l4.684 4.685 5.044-5.044v19.352h6.625V17.26l5.044 5.044 4.683-4.684-13.04-13.04z\" />\r\n                  </g>\r\n                </g>\r\n              </g>\r\n            </svg>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport Draggable from 'react-draggable';\r\n\r\nimport desktopIcon from './images/DesktopIcons/Discord.png';\r\n\r\nexport default class DesktopIconsOverlay extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={\"test\"} >\r\n                <Draggable\r\n                    axis=\"both\"\r\n                    handle=\".handle\"\r\n                    defaultPosition={{x: 0, y: 0}}\r\n                    position={null}\r\n                    grid={[25, 25]}\r\n                    scale={1}\r\n                    onStart={this.handleStart}\r\n                    onDrag={this.handleDrag}\r\n                    onStop={this.handleStop}>\r\n                    <div>\r\n                    <div className=\"handle\"><img src={desktopIcon}></img></div>\r\n                    </div>\r\n                </Draggable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-white.e7302e47.png\";","export default __webpack_public_path__ + \"static/media/howl049.6289c6df.jpg\";","export default __webpack_public_path__ + \"static/media/louie-zong-cat-walking-bg.6206659d.png\";","export default __webpack_public_path__ + \"static/media/louie-zong-fox.dac80a31.png\";","export default __webpack_public_path__ + \"static/media/mimi008.acb80d7c.jpg\";","export default __webpack_public_path__ + \"static/media/mimi047.e93fdf35.jpg\";","export default __webpack_public_path__ + \"static/media/Ring.7df6f6d2.jpg\";","export default __webpack_public_path__ + \"static/media/ponyo012.4be4db26.jpg\";","export default __webpack_public_path__ + \"static/media/Spiderverse.48caa8f6.jpg\";","export default __webpack_public_path__ + \"static/media/chihiro007.6a6f0ef2.jpg\";","export default __webpack_public_path__ + \"static/media/Animal-crossing-2.16972dff.jpg\";","export default __webpack_public_path__ + \"static/media/fire-emblem-wallpaper-3.f03e4177.jpg\";","export default __webpack_public_path__ + \"static/media/rav.036a8ded.jpg\";","// Components\r\nimport React from 'react';\r\nimport ImageContainer from './ImageContainer';\r\nimport DesktopIconsOverlay from './DesktopIconsOverlay';\r\nimport ScrollTop from \"./ScrollTop\";\r\n\r\n// Images\r\nimport logo from './images/logo-white.png';\r\nimport wallpaper1 from './images/wallpapers/howl049.jpg';\r\nimport wallpaper2 from './images/wallpapers/louie-zong-cat-walking-bg.png';\r\nimport wallpaper3 from './images/wallpapers/louie-zong-fox.png';\r\nimport wallpaper4 from './images/wallpapers/mimi008.jpg';\r\nimport wallpaper5 from './images/wallpapers/mimi047.jpg';\r\nimport wallpaper6 from './images/wallpapers/Ring.jpg';\r\nimport wallpaper7 from './images/wallpapers/ponyo012.jpg';\r\nimport wallpaper8 from './images/wallpapers/Spiderverse.jpg';\r\nimport wallpaper9 from './images/wallpapers/chihiro007.jpg';\r\nimport wallpaper10 from './images/wallpapers/Animal-crossing-2.jpg';\r\nimport wallpaper11 from './images/wallpapers/fire-emblem-wallpaper-3.jpg';\r\nimport wallpaper12 from './images/wallpapers/rav.jpg';\r\n\r\n// Styles\r\nimport './App.css';\r\nimport './Images.css'\r\n\r\n// Material Styles\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './MaterialOverride.css'\r\n\r\nconst btnStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <a href=\"https://danbullock.me\" rel=\"noreferrer\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </a>\r\n        <div className=\"App-header-title\">\r\n                <h1>WallpaperPix</h1>\r\n                <a href=\"https://twitter.com/DanBullockCS\" id=\"twitter-link\" >@DanBullockCS</a>\r\n        </div>\r\n        <Button\r\n          className={btnStyles().button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={<Icon>home</Icon>}\r\n          href=\"https://danbullock.me\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          alt=\"Home\"\r\n          title=\"Home\">\r\n        </Button>\r\n      </header>\r\n\r\n      <p className=\"App-description\">Simple blog site put together to share some wallpapers I find visually appealing</p>\r\n      {/* <DesktopIconsOverlay></DesktopIconsOverlay> */}\r\n      <div className=\"Image-grid\">\r\n        <ImageContainer imageUrl={wallpaper12} imageTitle={\"Rav Wallpaper\"} originalImageLink={'https://open.spotify.com/artist/6oeSQ4qmDQ7n89Rdt6tLLn'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper8} imageTitle={\"Spiderverse Wallpaper\"} originalImageLink={'https://www.pixel4k.com/spiderman-miles-lost-in-space-4k-79998.html'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper6} imageTitle={\"Ring Graphic Wallpaper\"} originalImageLink={'https://www.reddit.com/r/wallpaper/comments/ekxvfq/ultraviolet_4k_wallpaper_3840_x_2160'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper2} imageTitle={\"Louie Zong Cat Walking\"} originalImageLink={'https://www.louiezong.com/#/bgs/'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper3} imageTitle={\"Louie Zong Fox\"} originalImageLink={'https://www.louiezong.com/#/bgs/'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper10} imageTitle={\"Animal Crossing Wallpaper\"} originalImageLink={'https://www.nintendo.com/wallpapers/'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper11} imageTitle={\"Fire Emblem Wallpaper\"} originalImageLink={'https://www.nintendo.com/wallpapers/'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper4} imageTitle={\"Whisper of the Heart Wallpaper 1\"} originalImageLink={'https://www.ghibli.jp/works/mimi/#frame&gid=1&pid=8'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper5} imageTitle={\"Whisper of the Heart Wallpaper 2\"} originalImageLink={'https://www.ghibli.jp/works/mimi/#frame&gid=1&pid=47'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper1} imageTitle={\"Howl's Moving Castle Wallpaper\"} originalImageLink={'https://www.ghibli.jp/works/howl/#&gid=1&pid=49'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper7} imageTitle={\"Ponyo Wallpaper\"} originalImageLink={'https://www.ghibli.jp/works/ponyo/#&gid=1&pid=12'}></ImageContainer>\r\n        <ImageContainer imageUrl={wallpaper9} imageTitle={\"Spirited Away Wallpaper\"} originalImageLink={'https://www.ghibli.jp/works/chihiro/#&gid=1&pid=7'}></ImageContainer> \r\n      </div>\r\n      <ScrollTop />\r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}